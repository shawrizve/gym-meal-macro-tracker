BEGIN EXECUTE IMMEDIATE 'DROP TABLE WorkoutExercise CASCADE CONSTRAINTS'; EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE Workout CASCADE CONSTRAINTS';         EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE Exercise CASCADE CONSTRAINTS';        EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE BodyCheck CASCADE CONSTRAINTS';       EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE MealItem CASCADE CONSTRAINTS';        EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE Meal CASCADE CONSTRAINTS';            EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE FoodItem CASCADE CONSTRAINTS';        EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN EXECUTE IMMEDIATE 'DROP TABLE User_Account CASCADE CONSTRAINTS';    EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- Drop sequences & triggers (ignore if missing)
DECLARE
  PROCEDURE safe_drop(p_sql VARCHAR2) IS BEGIN EXECUTE IMMEDIATE p_sql; EXCEPTION WHEN OTHERS THEN NULL; END;
BEGIN
  safe_drop('DROP SEQUENCE seq_user');
  safe_drop('DROP SEQUENCE seq_food');
  safe_drop('DROP SEQUENCE seq_meal');
  safe_drop('DROP SEQUENCE seq_meal_item');
  safe_drop('DROP SEQUENCE seq_exercise');
  safe_drop('DROP SEQUENCE seq_workout');
  safe_drop('DROP SEQUENCE seq_bodycheck');

  safe_drop('DROP TRIGGER trg_user_pk');
  safe_drop('DROP TRIGGER trg_food_pk');
  safe_drop('DROP TRIGGER trg_meal_pk');
  safe_drop('DROP TRIGGER trg_meal_item_pk');
  safe_drop('DROP TRIGGER trg_exercise_pk');
  safe_drop('DROP TRIGGER trg_workout_pk');
  safe_drop('DROP TRIGGER trg_bodycheck_pk');
END;
/


CREATE TABLE User_Account (
  user_id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  full_name         VARCHAR2(100)    NOT NULL,
  email             VARCHAR2(200) UNIQUE   NOT NULL,
  created_at        DATE             DEFAULT SYSDATE NOT NULL,
  protein_target_g  NUMBER(6,2),           
  kcal_target       NUMBER(6)           
);

CREATE TABLE FoodItem (
  food_id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name              VARCHAR2(150)   UNIQUE NOT NULL,
  kcal_per_100g     NUMBER(6,1)      NOT NULL,
  protein_g_100g    NUMBER(6,2)      NOT NULL,
  carbs_g_100g      NUMBER(6,2)      NOT NULL,
  fat_g_100g        NUMBER(6,2)      NOT NULL,
  CHECK (
    kcal_per_100g >= 0 AND protein_g_100g >= 0 AND carbs_g_100g >= 0 AND fat_g_100g >= 0
  )
);

CREATE TABLE Meal (
  meal_id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id           NUMBER(10)       NOT NULL,
  meal_dt           DATE             NOT NULL,
  meal_type         VARCHAR2(20)     NOT NULL,
  note              VARCHAR2(400),
  FOREIGN KEY (user_id) REFERENCES User_Account(user_id),
  CHECK (meal_type IN ('breakfast','lunch','dinner','snack'))
);

CREATE TABLE MealItem (
  meal_item_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  meal_id           NUMBER(10)       NOT NULL,
  food_id           NUMBER(10)       NOT NULL,
  grams             NUMBER(7,2)      NOT NULL,
  FOREIGN KEY (meal_id) REFERENCES Meal(meal_id) ON DELETE CASCADE,
  FOREIGN KEY (food_id) REFERENCES FoodItem(food_id),
  CHECK (grams > 0)
);


--  WORKOUT / PROGRESS ENTITIES --

CREATE TABLE Exercise (
  exercise_id       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name              VARCHAR2(120)  UNIQUE  NOT NULL,
  muscle_group      VARCHAR2(60)
  
);

CREATE TABLE Workout (
  workout_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id           NUMBER(10)       NOT NULL,
  workout_dt        DATE             NOT NULL,
  notes             VARCHAR2(400),
  FOREIGN KEY (user_id) REFERENCES User_Account(user_id)
);

CREATE TABLE WorkoutExercise (
  workout_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  exercise_id       NUMBER(10)       NOT NULL,
  sets              NUMBER(3)        NOT NULL,
  reps              NUMBER(3)        NOT NULL,
  weight_kg         NUMBER(6,2),
  FOREIGN KEY (workout_id) REFERENCES Workout(workout_id) ON DELETE CASCADE,
  FOREIGN KEY (exercise_id) REFERENCES Exercise(exercise_id),
  CHECK (sets > 0 AND reps > 0 AND (weight_kg IS NULL OR weight_kg >= 0))
);

CREATE TABLE BodyCheck (
  check_id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id           NUMBER(10)   UNIQUE    NOT NULL,
  check_dt          DATE          UNIQUE   NOT NULL,
  weight_kg         NUMBER(6,2)      NOT NULL,
  body_fat_pct      NUMBER(5,2),       -- optional
  FOREIGN KEY (user_id) REFERENCES User_Account(user_id)
  
);

-- SEQUENCES + TRGS --

CREATE SEQUENCE seq_user START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_food START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_meal START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_meal_item START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_exercise START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_workout START WITH 1 INCREMENT BY 1 NOCACHE;
CREATE SEQUENCE seq_bodycheck START WITH 1 INCREMENT BY 1 NOCACHE;

CREATE OR REPLACE TRIGGER trg_user_pk
BEFORE INSERT ON User_Account
FOR EACH ROW
BEGIN
  IF :NEW.user_id IS NULL THEN :NEW.user_id := seq_user.NEXTVAL; END IF;
END;
/
CREATE OR REPLACE TRIGGER trg_food_pk
BEFORE INSERT ON FoodItem
FOR EACH ROW
BEGIN
  IF :NEW.food_id IS NULL THEN :NEW.food_id := seq_food.NEXTVAL; END IF;
END;
/
CREATE OR REPLACE TRIGGER trg_meal_pk
BEFORE INSERT ON Meal
FOR EACH ROW
BEGIN
  IF :NEW.meal_id IS NULL THEN :NEW.meal_id := seq_meal.NEXTVAL; END IF;
END;
/
CREATE OR REPLACE TRIGGER trg_meal_item_pk
BEFORE INSERT ON MealItem
FOR EACH ROW
BEGIN
  IF :NEW.meal_item_id IS NULL THEN :NEW.meal_item_id := seq_meal_item.NEXTVAL; END IF;
END;
/
CREATE OR REPLACE TRIGGER trg_exercise_pk
BEFORE INSERT ON Exercise
FOR EACH ROW
BEGIN
  IF :NEW.exercise_id IS NULL THEN :NEW.exercise_id := seq_exercise.NEXTVAL; END IF;
END;
/
CREATE OR REPLACE TRIGGER trg_workout_pk
BEFORE INSERT ON Workout
FOR EACH ROW
BEGIN
  IF :NEW.workout_id IS NULL THEN :NEW.workout_id := seq_workout.NEXTVAL; END IF;
END;
/
CREATE OR REPLACE TRIGGER trg_bodycheck_pk
BEFORE INSERT ON BodyCheck
FOR EACH ROW
BEGIN
  IF :NEW.check_id IS NULL THEN :NEW.check_id := seq_bodycheck.NEXTVAL; END IF;
END;
/
-- INDEXING --

CREATE INDEX ix_meal_user_day ON Meal(user_id, meal_dt);
CREATE INDEX ix_mi_meal ON MealItem(meal_id);
CREATE INDEX ix_mi_food ON MealItem(food_id);
CREATE INDEX ix_workout_user_day ON Workout(user_id, workout_dt);

COMMIT;